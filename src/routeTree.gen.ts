/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutRandomImport } from './routes/_layout/random'
import { Route as LayoutCollectionImport } from './routes/_layout/collection'
import { Route as LayoutSeedImport } from './routes/_layout/$seed'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRandomRoute = LayoutRandomImport.update({
  id: '/random',
  path: '/random',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCollectionRoute = LayoutCollectionImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSeedRoute = LayoutSeedImport.update({
  id: '/$seed',
  path: '/$seed',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$seed': {
      id: '/_layout/$seed'
      path: '/$seed'
      fullPath: '/$seed'
      preLoaderRoute: typeof LayoutSeedImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/collection': {
      id: '/_layout/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof LayoutCollectionImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/random': {
      id: '/_layout/random'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof LayoutRandomImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutSeedRoute: typeof LayoutSeedRoute
  LayoutCollectionRoute: typeof LayoutCollectionRoute
  LayoutRandomRoute: typeof LayoutRandomRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSeedRoute: LayoutSeedRoute,
  LayoutCollectionRoute: LayoutCollectionRoute,
  LayoutRandomRoute: LayoutRandomRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/$seed': typeof LayoutSeedRoute
  '/collection': typeof LayoutCollectionRoute
  '/random': typeof LayoutRandomRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/$seed': typeof LayoutSeedRoute
  '/collection': typeof LayoutCollectionRoute
  '/random': typeof LayoutRandomRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/$seed': typeof LayoutSeedRoute
  '/_layout/collection': typeof LayoutCollectionRoute
  '/_layout/random': typeof LayoutRandomRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$seed' | '/collection' | '/random' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$seed' | '/collection' | '/random' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/$seed'
    | '/_layout/collection'
    | '/_layout/random'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/$seed",
        "/_layout/collection",
        "/_layout/random",
        "/_layout/"
      ]
    },
    "/_layout/$seed": {
      "filePath": "_layout/$seed.tsx",
      "parent": "/_layout"
    },
    "/_layout/collection": {
      "filePath": "_layout/collection.tsx",
      "parent": "/_layout"
    },
    "/_layout/random": {
      "filePath": "_layout/random.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
